generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
enum UserRole {
  ADMIN
  USER
}

// QS1 = รอยืนยันใบเสนอราคา
// QS2 = ยืนยันใบเสนอราคาแล้ว
// QS3 = สำเร็จ
// QS4 = ยกเลิก
enum StatusStr {
  QS1
  QS2
  QS3
  QS4
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  accountInfo   AccountInfo?
  paymentInfo   UserPayment?
  accounts      Account[]
  services      Service[]
  clients      Client[]
  quotations   Quotation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model AccountInfo {
  id            String          @id @default(cuid())
  taxId         String          @unique
  address       String
  province      String
  district      String
  subDistrict   String
  zipCode       String?
  tel           String
  user          User            @relation(fields: [userId],references: [id])
  userId        String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserPayment {
  id            String          @id @default(cuid())
  desc          String          @db.Text
  user          User            @relation(fields: [userId],references: [id])
  userId        String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Service{
  id            String          @id @default(cuid())
  name          String
  price         Float
  desc          String          @db.Text
  note          String?         @db.Text
  user          User            @relation(fields: [userId],references: [id])
  userId        String          
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Client{
  id            String          @id @default(cuid())
  name          String 
  address       String
  province      String
  district      String
  subDistrict   String
  zipCode       String?
  tel           String
  email         String          @unique
  taxId         String 
  contactName   String?
  contactTel    String?
  contactEmail  String?
  isActive      Boolean         @default(true)
  isLP          Boolean         @default(true)
  user          User            @relation(fields: [userId],references: [id])
  userId        String          
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  quotations   Quotation[]
}

model Quotation {
  id            String          @id @default(cuid())
  qId           String          @unique
  signDate      DateTime?
  isUseVAT      Boolean         @default(false)
  taxAmount     Int?
  note          String?
  status        StatusStr       @default(QS1)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId],references: [id])
  userId        String
  client        Client          @relation(fields: [clientId],references: [id])
  clientId      String
  quotationServices             QuotationService[]
}

model QuotationService {
  id            String          @id @default(cuid())
  name          String
  price         Float
  desc          String          @db.Text
  note          String?         @db.Text
  qty           Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  quotation     Quotation       @relation(fields: [qId],references: [id])
  qId           String
}